name: Build and Push Sandbox

on:
  push:
    branches:
      - main
    paths:
      - 'sandbox-api/**'
  workflow_dispatch:
    inputs:
      sandbox:
        description: "Sandbox to import"
        type: choice
        default: "all"
        options:
          - base
          - expo
          - nextjs
          - node
          - py-app
          - ts-app
          - vite

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: blaxel-ai/sandbox

jobs:
  sandbox-api:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./sandbox-api
          file: ./sandbox-api/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  generate-sandboxes:
    needs: sandbox-api
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Fetch last 2 commits to compare changes
      - name: Retrieve sandbox
        id: retrieve-sandbox
        shell: bash
        run: |
          if [[ ! -z "${{ inputs.sandbox }}" && "${{ inputs.sandbox }}" != "all" ]]; then
            echo "sandbox=[\"${{ inputs.sandbox }}\"]" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get list of all Sandbox files
          all_uvm=$(tree -J -L 1 hub | jq -c '.[0].contents | map(select(.name) | .name)')


          if [[ "${{ inputs.sandbox }}" == "all" ]]; then
            echo "Importing all Sandbox"
            echo "sandbox=$all_uvm" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Filter Sandbox based on changes
          changed_uvm=()

          # Check if there are changes in sandbox-api
          if git diff --name-only HEAD^ HEAD | grep -q "sandbox-api/"; then
            echo "Changes detected in sandbox-api, including all Sandbox"
            echo "sandbox=$all_uvm" >> $GITHUB_OUTPUT
            exit 0
          else
            for sandbox in $(echo $all_uvm | jq -r '.[]'); do
              if git diff --name-only HEAD^ HEAD | grep -q "hub/${sandbox}"; then
                changed_uvm+=("$sandbox")
              fi
            done
          fi

          # Convert array to JSON array
          if [ ${#changed_uvm[@]} -eq 0 ]; then
            echo "No Sandbox with changes found"
            echo "sandbox=[]" >> $GITHUB_OUTPUT
          else
            # Create a properly formatted JSON array
            uvm_json="["
            for sandbox in "${changed_uvm[@]}"; do
              if [ "$uvm_json" != "[" ]; then
                uvm_json="$uvm_json,"
              fi
              uvm_json="$uvm_json\"$sandbox\""
            done
            uvm_json="$uvm_json]"
            echo "sandbox=$uvm_json" >> $GITHUB_OUTPUT
          fi
      - name: Trigger UVM Workflow
        if: steps.retrieve-sandbox.outputs.sandbox != '[]'
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository_owner }}/uvm
          event-type: build-sandbox
          client-payload: '{"sandboxes": ${{ steps.retrieve-sandbox.outputs.sandbox }}, "env": "${{ github.ref_name == ''main'' && ''prod'' || ''dev'' }}", "repository_url": "${{ github.repository }}"}'