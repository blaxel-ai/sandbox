name: Build and Push Sandbox

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      sandbox:
        description: "Sandbox to import"
        type: choice
        default: ""
        options:
          - all
          - base
          - expo
          - nextjs
          - node
          - py-app
          - ts-app
          - vite

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: blaxel-ai/sandbox
  TAG: ${{ github.sha }}
  BL_ENV: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
  DEV_IMAGE_BUCKET: controlplane-dev-build-images-eu-west-1-89f8d3
  PROD_IMAGE_BUCKET: controlplane-prod-build-images-us-west-2-3c9279

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      sandbox-api-changed: ${{ steps.changes.outputs.sandbox-api }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for changes
        id: changes
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "sandbox-api=true" >> $GITHUB_OUTPUT
          elif git diff --name-only HEAD^ HEAD | grep -q "sandbox-api/"; then
            echo "sandbox-api=true" >> $GITHUB_OUTPUT
          else
            echo "sandbox-api=false" >> $GITHUB_OUTPUT
          fi

  sandbox-api:
    needs: check-changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    # Only run if there are changes to sandbox-api or if workflow is manually triggered
    if: needs.check-changes.outputs.sandbox-api-changed == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}
            type=raw,value=develop,enable=${{ github.ref_name == 'develop' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./sandbox-api
          file: ./sandbox-api/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  generate-matrix:
    needs: [check-changes, sandbox-api]
    runs-on: ubuntu-latest
    # Run if sandbox-api was skipped or completed successfully
    if: always() && (needs.check-changes.result == 'success')
    outputs:
      sandboxes: ${{ steps.retrieve-sandbox.outputs.sandboxes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Fetch last 2 commits to compare changes
      - name: Retrieve sandbox
        id: retrieve-sandbox
        shell: bash
        run: |

          # Get list of all Sandbox files
          all_sandboxes=$(tree -J -L 1 hub | jq -c '.[0].contents | map(select(.name) | .name)')


          if [[ "${{ inputs.sandbox }}" == "all" ]]; then
            echo "Importing all Sandboxes"
            echo "sandboxes=$all_sandboxes" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [[ ! -z "${{ inputs.sandbox }}" ]]; then
            echo "sandboxes=[\"${{ inputs.sandbox }}\"]" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Filter Sandbox based on changes
          changed_sandboxes=()

          # Check if there are changes in sandbox-api
          if git diff --name-only HEAD^ HEAD | grep -q "sandbox-api/"; then
            echo "Changes detected in sandbox-api, including all Sandboxes"
            echo "sandboxes=$all_sandboxes" >> $GITHUB_OUTPUT
            exit 0
          else
            for sandbox in $(echo $all_sandboxes | jq -r '.[]'); do
              if git diff --name-only HEAD^ HEAD | grep -q "hub/${sandbox}"; then
                changed_sandboxes+=("$sandbox")
              fi
            done
          fi

          # Convert array to JSON array
          if [ ${#changed_sandboxes[@]} -eq 0 ]; then
            echo "No Sandboxes with changes found"
            echo "sandboxes=[]" >> $GITHUB_OUTPUT
          else
            # Create a properly formatted JSON array
            sandboxes_json="["
            for sandbox in "${changed_sandboxes[@]}"; do
              if [ "$sandboxes_json" != "[" ]; then
                sandboxes_json="$sandboxes_json,"
              fi
              sandboxes_json="$sandboxes_json\"$sandbox\""
            done
            sandboxes_json="$sandboxes_json]"
            echo "sandboxes=$sandboxes_json" >> $GITHUB_OUTPUT
          fi
  
  publish-sandboxes:
    runs-on: ubuntu-latest
    needs:
      - generate-matrix
      - sandbox-api
    # Run after sandbox-api completes (if it runs) or is skipped
    if: always() && needs.generate-matrix.outputs.sandboxes != '[]' && (needs.sandbox-api.result == 'success' || needs.sandbox-api.result == 'skipped')
    strategy:
      matrix:
        sandbox: ${{ fromJson(needs.generate-matrix.outputs.sandboxes )}}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.sandbox }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable=${{ github.ref_name == 'main' }}
            type=raw,value=develop,enable=${{ github.ref_name == 'develop' }}
      
      - name: Build and push sandbox image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./hub/${{ matrix.sandbox }}/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
  sandbox-s3-build:
    runs-on: codebuild-sandbox-${{ github.run_id }}-${{ github.run_attempt }}
    environment: |-
      ${{
        github.ref_name == 'main' && 'prod'
      || github.ref_name == 'develop' && 'dev'
      || 'dev'
      }}
    needs: [generate-matrix, publish-sandboxes]
    if: always() && needs.generate-matrix.outputs.sandboxes != '[]' && needs.publish-sandboxes.result == 'success'
    strategy:
      matrix:
        sandbox: ${{ fromJson(needs.generate-matrix.outputs.sandboxes )}}
    steps:
      - name: Build sandbox image
        env:
          SANDBOX_NAME: ${{ matrix.sandbox }}
          IMAGE_TAG: ${{ github.ref_name == 'main' && 'latest' || github.ref_name == 'develop' && 'develop' || env.TAG }}
          BL_TYPE: sandbox
          STAGE: ${{ env.BL_ENV }}
          SRC_REGISTRY: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.sandbox }}
          BASE_IMAGE_TAG: ${{ github.ref_name == 'main' && 'latest' || github.ref_name == 'develop' && 'develop' || github.sha }}
          BUILD_ID: ${{ github.run_id }}-${{ github.run_attempt }}
          LOG_LEVEL: debug
          IMAGE_BUCKET_MK3: ${{ env.BL_ENV == 'prod' && env.PROD_IMAGE_BUCKET || env.DEV_IMAGE_BUCKET }}
          DEPOT_PROJECT_ID: ${{ env.BL_ENV == 'prod' && secrets.DEPOT_PROJECT_ID_PROD || secrets.DEPOT_PROJECT_ID_DEV }}
          LAMBDA_FUNCTION_NAME: controlplane-${{ env.BL_ENV }}-metamorph
          LAMBDA_REGION: ${{ env.BL_ENV == 'prod' && (vars.LAMBDA_REGION_PROD || 'us-west-2') || (vars.LAMBDA_REGION_DEV || 'eu-west-1') }}
          DEPOT_TOKEN: ${{ env.BL_ENV == 'prod' && secrets.DEPOT_TOKEN_PROD || secrets.DEPOT_TOKEN_DEV }}
          REPOSITORY_URL: ${{ github.server_url }}/${{ github.repository }}
          SOURCE_BRANCH: ${{ github.ref_name }}
        run: |
          # Debug: Check if Lambda region is set
          if [ -z "$LAMBDA_REGION" ]; then
            echo "Error: LAMBDA_REGION is not set"
            echo "Please configure LAMBDA_REGION in the environment variables"
            exit 1
          fi

          # Build the JSON payload
          PAYLOAD=$(cat <<EOF
          {
            "otel_enabled": false,
            "bl_env": "$STAGE",
            "output_s3": "s3://$IMAGE_BUCKET_MK3/$SANDBOX_NAME/$IMAGE_TAG",
            "no_optimize": false,
            "depot_token": "$DEPOT_TOKEN",
            "bl_build_id": "$BUILD_ID",
            "bl_type": "$BL_TYPE",
            "bl_generation": "mk3",
            "log_level": "$LOG_LEVEL",
            "depot_project_id": "$DEPOT_PROJECT_ID",
            "image": "$SRC_REGISTRY:$BASE_IMAGE_TAG"
          }
          EOF
          )

          echo "Invoking Lambda function: $LAMBDA_FUNCTION_NAME"
          echo "Sandbox Name: $SANDBOX_NAME"
          echo "Image Tag: $IMAGE_TAG"
          echo "BL Type: $BL_TYPE"
          echo "Lambda Region: $LAMBDA_REGION"

          
          # Show S3 output location
          echo "Target S3 location:"
          echo "s3://$IMAGE_BUCKET_MK3/$SANDBOX_NAME/$IMAGE_TAG"
          
          # Invoke Lambda and capture response
          aws lambda invoke \
            --function-name "$LAMBDA_FUNCTION_NAME" \
            --region "$LAMBDA_REGION" \
            --payload "$PAYLOAD" \
            --cli-binary-format raw-in-base64-out \
            --log-type Tail \
            --no-cli-pager \
            --cli-read-timeout 900 \
            --cli-connect-timeout 60 \
            /tmp/response.json

          # Check response
          if [ -f /tmp/response.json ]; then
            cat /tmp/response.json | jq '.'

            # Check if build was successful
            SUCCESS=$(jq -r '.success // false' /tmp/response.json)
            if [ "$SUCCESS" != "true" ]; then
              echo "Build failed"
              MESSAGE=$(jq -r '.message // "No message provided"' /tmp/response.json)
              echo "Error: $MESSAGE"
              exit 1
            fi

            echo "Build completed successfully"
          else
            echo "No response from Lambda"
            exit 1
          fi